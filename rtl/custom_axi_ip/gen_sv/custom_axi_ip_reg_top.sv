// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module custom_axi_ip_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 7
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output custom_axi_ip_reg_pkg::custom_axi_ip_reg2hw_t reg2hw, // Write
  input  custom_axi_ip_reg_pkg::custom_axi_ip_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import custom_axi_ip_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] reg0_0_qs;
  logic [31:0] reg0_0_wd;
  logic reg0_0_we;
  logic [31:0] reg0_1_qs;
  logic [31:0] reg0_1_wd;
  logic reg0_1_we;
  logic [31:0] reg0_2_qs;
  logic [31:0] reg0_2_wd;
  logic reg0_2_we;
  logic [31:0] reg0_3_qs;
  logic [31:0] reg0_3_wd;
  logic reg0_3_we;
  logic [31:0] reg0_4_qs;
  logic [31:0] reg0_4_wd;
  logic reg0_4_we;
  logic [31:0] reg0_5_qs;
  logic [31:0] reg0_5_wd;
  logic reg0_5_we;
  logic [31:0] reg0_6_qs;
  logic [31:0] reg0_6_wd;
  logic reg0_6_we;
  logic [31:0] reg0_7_qs;
  logic [31:0] reg0_7_wd;
  logic reg0_7_we;
  logic [31:0] reg1_0_qs;
  logic [31:0] reg1_0_wd;
  logic reg1_0_we;
  logic [31:0] reg1_1_qs;
  logic [31:0] reg1_1_wd;
  logic reg1_1_we;
  logic [31:0] reg1_2_qs;
  logic [31:0] reg1_2_wd;
  logic reg1_2_we;
  logic [31:0] reg1_3_qs;
  logic [31:0] reg1_3_wd;
  logic reg1_3_we;
  logic [31:0] reg1_4_qs;
  logic [31:0] reg1_4_wd;
  logic reg1_4_we;
  logic [31:0] reg1_5_qs;
  logic [31:0] reg1_5_wd;
  logic reg1_5_we;
  logic [31:0] reg1_6_qs;
  logic [31:0] reg1_6_wd;
  logic reg1_6_we;
  logic [31:0] reg1_7_qs;
  logic [31:0] reg1_7_wd;
  logic reg1_7_we;
  logic [31:0] reg2_0_qs;
  logic [31:0] reg2_0_wd;
  logic reg2_0_we;
  logic [31:0] reg2_1_qs;
  logic [31:0] reg2_1_wd;
  logic reg2_1_we;
  logic [31:0] reg2_2_qs;
  logic [31:0] reg2_2_wd;
  logic reg2_2_we;
  logic [31:0] reg2_3_qs;
  logic [31:0] reg2_3_wd;
  logic reg2_3_we;
  logic [31:0] reg2_4_qs;
  logic [31:0] reg2_4_wd;
  logic reg2_4_we;
  logic [31:0] reg2_5_qs;
  logic [31:0] reg2_5_wd;
  logic reg2_5_we;
  logic [31:0] reg2_6_qs;
  logic [31:0] reg2_6_wd;
  logic reg2_6_we;
  logic [31:0] reg2_7_qs;
  logic [31:0] reg2_7_wd;
  logic reg2_7_we;

  // Register instances

  // Subregister 0 of Multireg reg0
  // R[reg0_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg0_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg0_0_we),
    .wd     (reg0_0_wd),

    // from internal hardware
    .de     (hw2reg.reg0[0].de),
    .d      (hw2reg.reg0[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg0[0].q ),

    // to register interface (read)
    .qs     (reg0_0_qs)
  );

  // Subregister 1 of Multireg reg0
  // R[reg0_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg0_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg0_1_we),
    .wd     (reg0_1_wd),

    // from internal hardware
    .de     (hw2reg.reg0[1].de),
    .d      (hw2reg.reg0[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg0[1].q ),

    // to register interface (read)
    .qs     (reg0_1_qs)
  );

  // Subregister 2 of Multireg reg0
  // R[reg0_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg0_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg0_2_we),
    .wd     (reg0_2_wd),

    // from internal hardware
    .de     (hw2reg.reg0[2].de),
    .d      (hw2reg.reg0[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg0[2].q ),

    // to register interface (read)
    .qs     (reg0_2_qs)
  );

  // Subregister 3 of Multireg reg0
  // R[reg0_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg0_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg0_3_we),
    .wd     (reg0_3_wd),

    // from internal hardware
    .de     (hw2reg.reg0[3].de),
    .d      (hw2reg.reg0[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg0[3].q ),

    // to register interface (read)
    .qs     (reg0_3_qs)
  );

  // Subregister 4 of Multireg reg0
  // R[reg0_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg0_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg0_4_we),
    .wd     (reg0_4_wd),

    // from internal hardware
    .de     (hw2reg.reg0[4].de),
    .d      (hw2reg.reg0[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg0[4].q ),

    // to register interface (read)
    .qs     (reg0_4_qs)
  );

  // Subregister 5 of Multireg reg0
  // R[reg0_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg0_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg0_5_we),
    .wd     (reg0_5_wd),

    // from internal hardware
    .de     (hw2reg.reg0[5].de),
    .d      (hw2reg.reg0[5].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg0[5].q ),

    // to register interface (read)
    .qs     (reg0_5_qs)
  );

  // Subregister 6 of Multireg reg0
  // R[reg0_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg0_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg0_6_we),
    .wd     (reg0_6_wd),

    // from internal hardware
    .de     (hw2reg.reg0[6].de),
    .d      (hw2reg.reg0[6].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg0[6].q ),

    // to register interface (read)
    .qs     (reg0_6_qs)
  );

  // Subregister 7 of Multireg reg0
  // R[reg0_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg0_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg0_7_we),
    .wd     (reg0_7_wd),

    // from internal hardware
    .de     (hw2reg.reg0[7].de),
    .d      (hw2reg.reg0[7].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg0[7].q ),

    // to register interface (read)
    .qs     (reg0_7_qs)
  );



  // Subregister 0 of Multireg reg1
  // R[reg1_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg1_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg1_0_we),
    .wd     (reg1_0_wd),

    // from internal hardware
    .de     (hw2reg.reg1[0].de),
    .d      (hw2reg.reg1[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg1[0].q ),

    // to register interface (read)
    .qs     (reg1_0_qs)
  );

  // Subregister 1 of Multireg reg1
  // R[reg1_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg1_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg1_1_we),
    .wd     (reg1_1_wd),

    // from internal hardware
    .de     (hw2reg.reg1[1].de),
    .d      (hw2reg.reg1[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg1[1].q ),

    // to register interface (read)
    .qs     (reg1_1_qs)
  );

  // Subregister 2 of Multireg reg1
  // R[reg1_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg1_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg1_2_we),
    .wd     (reg1_2_wd),

    // from internal hardware
    .de     (hw2reg.reg1[2].de),
    .d      (hw2reg.reg1[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg1[2].q ),

    // to register interface (read)
    .qs     (reg1_2_qs)
  );

  // Subregister 3 of Multireg reg1
  // R[reg1_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg1_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg1_3_we),
    .wd     (reg1_3_wd),

    // from internal hardware
    .de     (hw2reg.reg1[3].de),
    .d      (hw2reg.reg1[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg1[3].q ),

    // to register interface (read)
    .qs     (reg1_3_qs)
  );

  // Subregister 4 of Multireg reg1
  // R[reg1_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg1_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg1_4_we),
    .wd     (reg1_4_wd),

    // from internal hardware
    .de     (hw2reg.reg1[4].de),
    .d      (hw2reg.reg1[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg1[4].q ),

    // to register interface (read)
    .qs     (reg1_4_qs)
  );

  // Subregister 5 of Multireg reg1
  // R[reg1_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg1_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg1_5_we),
    .wd     (reg1_5_wd),

    // from internal hardware
    .de     (hw2reg.reg1[5].de),
    .d      (hw2reg.reg1[5].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg1[5].q ),

    // to register interface (read)
    .qs     (reg1_5_qs)
  );

  // Subregister 6 of Multireg reg1
  // R[reg1_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg1_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg1_6_we),
    .wd     (reg1_6_wd),

    // from internal hardware
    .de     (hw2reg.reg1[6].de),
    .d      (hw2reg.reg1[6].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg1[6].q ),

    // to register interface (read)
    .qs     (reg1_6_qs)
  );

  // Subregister 7 of Multireg reg1
  // R[reg1_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg1_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg1_7_we),
    .wd     (reg1_7_wd),

    // from internal hardware
    .de     (hw2reg.reg1[7].de),
    .d      (hw2reg.reg1[7].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg1[7].q ),

    // to register interface (read)
    .qs     (reg1_7_qs)
  );



  // Subregister 0 of Multireg reg2
  // R[reg2_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg2_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg2_0_we),
    .wd     (reg2_0_wd),

    // from internal hardware
    .de     (hw2reg.reg2[0].de),
    .d      (hw2reg.reg2[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg2[0].q ),

    // to register interface (read)
    .qs     (reg2_0_qs)
  );

  // Subregister 1 of Multireg reg2
  // R[reg2_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg2_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg2_1_we),
    .wd     (reg2_1_wd),

    // from internal hardware
    .de     (hw2reg.reg2[1].de),
    .d      (hw2reg.reg2[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg2[1].q ),

    // to register interface (read)
    .qs     (reg2_1_qs)
  );

  // Subregister 2 of Multireg reg2
  // R[reg2_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg2_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg2_2_we),
    .wd     (reg2_2_wd),

    // from internal hardware
    .de     (hw2reg.reg2[2].de),
    .d      (hw2reg.reg2[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg2[2].q ),

    // to register interface (read)
    .qs     (reg2_2_qs)
  );

  // Subregister 3 of Multireg reg2
  // R[reg2_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg2_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg2_3_we),
    .wd     (reg2_3_wd),

    // from internal hardware
    .de     (hw2reg.reg2[3].de),
    .d      (hw2reg.reg2[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg2[3].q ),

    // to register interface (read)
    .qs     (reg2_3_qs)
  );

  // Subregister 4 of Multireg reg2
  // R[reg2_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg2_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg2_4_we),
    .wd     (reg2_4_wd),

    // from internal hardware
    .de     (hw2reg.reg2[4].de),
    .d      (hw2reg.reg2[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg2[4].q ),

    // to register interface (read)
    .qs     (reg2_4_qs)
  );

  // Subregister 5 of Multireg reg2
  // R[reg2_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg2_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg2_5_we),
    .wd     (reg2_5_wd),

    // from internal hardware
    .de     (hw2reg.reg2[5].de),
    .d      (hw2reg.reg2[5].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg2[5].q ),

    // to register interface (read)
    .qs     (reg2_5_qs)
  );

  // Subregister 6 of Multireg reg2
  // R[reg2_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg2_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg2_6_we),
    .wd     (reg2_6_wd),

    // from internal hardware
    .de     (hw2reg.reg2[6].de),
    .d      (hw2reg.reg2[6].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg2[6].q ),

    // to register interface (read)
    .qs     (reg2_6_qs)
  );

  // Subregister 7 of Multireg reg2
  // R[reg2_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_reg2_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reg2_7_we),
    .wd     (reg2_7_wd),

    // from internal hardware
    .de     (hw2reg.reg2[7].de),
    .d      (hw2reg.reg2[7].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reg2[7].q ),

    // to register interface (read)
    .qs     (reg2_7_qs)
  );




  logic [23:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == CUSTOM_AXI_IP_REG0_0_OFFSET);
    addr_hit[ 1] = (reg_addr == CUSTOM_AXI_IP_REG0_1_OFFSET);
    addr_hit[ 2] = (reg_addr == CUSTOM_AXI_IP_REG0_2_OFFSET);
    addr_hit[ 3] = (reg_addr == CUSTOM_AXI_IP_REG0_3_OFFSET);
    addr_hit[ 4] = (reg_addr == CUSTOM_AXI_IP_REG0_4_OFFSET);
    addr_hit[ 5] = (reg_addr == CUSTOM_AXI_IP_REG0_5_OFFSET);
    addr_hit[ 6] = (reg_addr == CUSTOM_AXI_IP_REG0_6_OFFSET);
    addr_hit[ 7] = (reg_addr == CUSTOM_AXI_IP_REG0_7_OFFSET);
    addr_hit[ 8] = (reg_addr == CUSTOM_AXI_IP_REG1_0_OFFSET);
    addr_hit[ 9] = (reg_addr == CUSTOM_AXI_IP_REG1_1_OFFSET);
    addr_hit[10] = (reg_addr == CUSTOM_AXI_IP_REG1_2_OFFSET);
    addr_hit[11] = (reg_addr == CUSTOM_AXI_IP_REG1_3_OFFSET);
    addr_hit[12] = (reg_addr == CUSTOM_AXI_IP_REG1_4_OFFSET);
    addr_hit[13] = (reg_addr == CUSTOM_AXI_IP_REG1_5_OFFSET);
    addr_hit[14] = (reg_addr == CUSTOM_AXI_IP_REG1_6_OFFSET);
    addr_hit[15] = (reg_addr == CUSTOM_AXI_IP_REG1_7_OFFSET);
    addr_hit[16] = (reg_addr == CUSTOM_AXI_IP_REG2_0_OFFSET);
    addr_hit[17] = (reg_addr == CUSTOM_AXI_IP_REG2_1_OFFSET);
    addr_hit[18] = (reg_addr == CUSTOM_AXI_IP_REG2_2_OFFSET);
    addr_hit[19] = (reg_addr == CUSTOM_AXI_IP_REG2_3_OFFSET);
    addr_hit[20] = (reg_addr == CUSTOM_AXI_IP_REG2_4_OFFSET);
    addr_hit[21] = (reg_addr == CUSTOM_AXI_IP_REG2_5_OFFSET);
    addr_hit[22] = (reg_addr == CUSTOM_AXI_IP_REG2_6_OFFSET);
    addr_hit[23] = (reg_addr == CUSTOM_AXI_IP_REG2_7_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(CUSTOM_AXI_IP_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(CUSTOM_AXI_IP_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(CUSTOM_AXI_IP_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(CUSTOM_AXI_IP_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(CUSTOM_AXI_IP_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(CUSTOM_AXI_IP_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(CUSTOM_AXI_IP_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(CUSTOM_AXI_IP_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(CUSTOM_AXI_IP_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(CUSTOM_AXI_IP_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(CUSTOM_AXI_IP_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(CUSTOM_AXI_IP_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(CUSTOM_AXI_IP_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(CUSTOM_AXI_IP_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(CUSTOM_AXI_IP_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(CUSTOM_AXI_IP_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(CUSTOM_AXI_IP_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(CUSTOM_AXI_IP_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(CUSTOM_AXI_IP_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(CUSTOM_AXI_IP_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(CUSTOM_AXI_IP_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(CUSTOM_AXI_IP_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(CUSTOM_AXI_IP_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(CUSTOM_AXI_IP_PERMIT[23] & ~reg_be)))));
  end

  assign reg0_0_we = addr_hit[0] & reg_we & !reg_error;
  assign reg0_0_wd = reg_wdata[31:0];

  assign reg0_1_we = addr_hit[1] & reg_we & !reg_error;
  assign reg0_1_wd = reg_wdata[31:0];

  assign reg0_2_we = addr_hit[2] & reg_we & !reg_error;
  assign reg0_2_wd = reg_wdata[31:0];

  assign reg0_3_we = addr_hit[3] & reg_we & !reg_error;
  assign reg0_3_wd = reg_wdata[31:0];

  assign reg0_4_we = addr_hit[4] & reg_we & !reg_error;
  assign reg0_4_wd = reg_wdata[31:0];

  assign reg0_5_we = addr_hit[5] & reg_we & !reg_error;
  assign reg0_5_wd = reg_wdata[31:0];

  assign reg0_6_we = addr_hit[6] & reg_we & !reg_error;
  assign reg0_6_wd = reg_wdata[31:0];

  assign reg0_7_we = addr_hit[7] & reg_we & !reg_error;
  assign reg0_7_wd = reg_wdata[31:0];

  assign reg1_0_we = addr_hit[8] & reg_we & !reg_error;
  assign reg1_0_wd = reg_wdata[31:0];

  assign reg1_1_we = addr_hit[9] & reg_we & !reg_error;
  assign reg1_1_wd = reg_wdata[31:0];

  assign reg1_2_we = addr_hit[10] & reg_we & !reg_error;
  assign reg1_2_wd = reg_wdata[31:0];

  assign reg1_3_we = addr_hit[11] & reg_we & !reg_error;
  assign reg1_3_wd = reg_wdata[31:0];

  assign reg1_4_we = addr_hit[12] & reg_we & !reg_error;
  assign reg1_4_wd = reg_wdata[31:0];

  assign reg1_5_we = addr_hit[13] & reg_we & !reg_error;
  assign reg1_5_wd = reg_wdata[31:0];

  assign reg1_6_we = addr_hit[14] & reg_we & !reg_error;
  assign reg1_6_wd = reg_wdata[31:0];

  assign reg1_7_we = addr_hit[15] & reg_we & !reg_error;
  assign reg1_7_wd = reg_wdata[31:0];

  assign reg2_0_we = addr_hit[16] & reg_we & !reg_error;
  assign reg2_0_wd = reg_wdata[31:0];

  assign reg2_1_we = addr_hit[17] & reg_we & !reg_error;
  assign reg2_1_wd = reg_wdata[31:0];

  assign reg2_2_we = addr_hit[18] & reg_we & !reg_error;
  assign reg2_2_wd = reg_wdata[31:0];

  assign reg2_3_we = addr_hit[19] & reg_we & !reg_error;
  assign reg2_3_wd = reg_wdata[31:0];

  assign reg2_4_we = addr_hit[20] & reg_we & !reg_error;
  assign reg2_4_wd = reg_wdata[31:0];

  assign reg2_5_we = addr_hit[21] & reg_we & !reg_error;
  assign reg2_5_wd = reg_wdata[31:0];

  assign reg2_6_we = addr_hit[22] & reg_we & !reg_error;
  assign reg2_6_wd = reg_wdata[31:0];

  assign reg2_7_we = addr_hit[23] & reg_we & !reg_error;
  assign reg2_7_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = reg0_0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = reg0_1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = reg0_2_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = reg0_3_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = reg0_4_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = reg0_5_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = reg0_6_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = reg0_7_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = reg1_0_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = reg1_1_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = reg1_2_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = reg1_3_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = reg1_4_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = reg1_5_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = reg1_6_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = reg1_7_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = reg2_0_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = reg2_1_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = reg2_2_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = reg2_3_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = reg2_4_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = reg2_5_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = reg2_6_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = reg2_7_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module custom_axi_ip_reg_top_intf
#(
  parameter int AW = 7,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output custom_axi_ip_reg_pkg::custom_axi_ip_reg2hw_t reg2hw, // Write
  input  custom_axi_ip_reg_pkg::custom_axi_ip_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  custom_axi_ip_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


