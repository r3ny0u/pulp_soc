// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package custom_axi_ip_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic [31:0] q;
  } custom_axi_ip_reg2hw_reg0_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } custom_axi_ip_reg2hw_reg1_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } custom_axi_ip_reg2hw_reg2_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } custom_axi_ip_hw2reg_reg0_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } custom_axi_ip_hw2reg_reg1_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } custom_axi_ip_hw2reg_reg2_mreg_t;

  // Register -> HW type
  typedef struct packed {
    custom_axi_ip_reg2hw_reg0_mreg_t [7:0] reg0; // [767:512]
    custom_axi_ip_reg2hw_reg1_mreg_t [7:0] reg1; // [511:256]
    custom_axi_ip_reg2hw_reg2_mreg_t [7:0] reg2; // [255:0]
  } custom_axi_ip_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    custom_axi_ip_hw2reg_reg0_mreg_t [7:0] reg0; // [791:528]
    custom_axi_ip_hw2reg_reg1_mreg_t [7:0] reg1; // [527:264]
    custom_axi_ip_hw2reg_reg2_mreg_t [7:0] reg2; // [263:0]
  } custom_axi_ip_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG0_0_OFFSET = 7'h 0;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG0_1_OFFSET = 7'h 4;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG0_2_OFFSET = 7'h 8;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG0_3_OFFSET = 7'h c;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG0_4_OFFSET = 7'h 10;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG0_5_OFFSET = 7'h 14;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG0_6_OFFSET = 7'h 18;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG0_7_OFFSET = 7'h 1c;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG1_0_OFFSET = 7'h 20;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG1_1_OFFSET = 7'h 24;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG1_2_OFFSET = 7'h 28;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG1_3_OFFSET = 7'h 2c;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG1_4_OFFSET = 7'h 30;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG1_5_OFFSET = 7'h 34;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG1_6_OFFSET = 7'h 38;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG1_7_OFFSET = 7'h 3c;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG2_0_OFFSET = 7'h 40;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG2_1_OFFSET = 7'h 44;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG2_2_OFFSET = 7'h 48;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG2_3_OFFSET = 7'h 4c;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG2_4_OFFSET = 7'h 50;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG2_5_OFFSET = 7'h 54;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG2_6_OFFSET = 7'h 58;
  parameter logic [BlockAw-1:0] CUSTOM_AXI_IP_REG2_7_OFFSET = 7'h 5c;

  // Register index
  typedef enum int {
    CUSTOM_AXI_IP_REG0_0,
    CUSTOM_AXI_IP_REG0_1,
    CUSTOM_AXI_IP_REG0_2,
    CUSTOM_AXI_IP_REG0_3,
    CUSTOM_AXI_IP_REG0_4,
    CUSTOM_AXI_IP_REG0_5,
    CUSTOM_AXI_IP_REG0_6,
    CUSTOM_AXI_IP_REG0_7,
    CUSTOM_AXI_IP_REG1_0,
    CUSTOM_AXI_IP_REG1_1,
    CUSTOM_AXI_IP_REG1_2,
    CUSTOM_AXI_IP_REG1_3,
    CUSTOM_AXI_IP_REG1_4,
    CUSTOM_AXI_IP_REG1_5,
    CUSTOM_AXI_IP_REG1_6,
    CUSTOM_AXI_IP_REG1_7,
    CUSTOM_AXI_IP_REG2_0,
    CUSTOM_AXI_IP_REG2_1,
    CUSTOM_AXI_IP_REG2_2,
    CUSTOM_AXI_IP_REG2_3,
    CUSTOM_AXI_IP_REG2_4,
    CUSTOM_AXI_IP_REG2_5,
    CUSTOM_AXI_IP_REG2_6,
    CUSTOM_AXI_IP_REG2_7
  } custom_axi_ip_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CUSTOM_AXI_IP_PERMIT [24] = '{
    4'b 1111, // index[ 0] CUSTOM_AXI_IP_REG0_0
    4'b 1111, // index[ 1] CUSTOM_AXI_IP_REG0_1
    4'b 1111, // index[ 2] CUSTOM_AXI_IP_REG0_2
    4'b 1111, // index[ 3] CUSTOM_AXI_IP_REG0_3
    4'b 1111, // index[ 4] CUSTOM_AXI_IP_REG0_4
    4'b 1111, // index[ 5] CUSTOM_AXI_IP_REG0_5
    4'b 1111, // index[ 6] CUSTOM_AXI_IP_REG0_6
    4'b 1111, // index[ 7] CUSTOM_AXI_IP_REG0_7
    4'b 1111, // index[ 8] CUSTOM_AXI_IP_REG1_0
    4'b 1111, // index[ 9] CUSTOM_AXI_IP_REG1_1
    4'b 1111, // index[10] CUSTOM_AXI_IP_REG1_2
    4'b 1111, // index[11] CUSTOM_AXI_IP_REG1_3
    4'b 1111, // index[12] CUSTOM_AXI_IP_REG1_4
    4'b 1111, // index[13] CUSTOM_AXI_IP_REG1_5
    4'b 1111, // index[14] CUSTOM_AXI_IP_REG1_6
    4'b 1111, // index[15] CUSTOM_AXI_IP_REG1_7
    4'b 1111, // index[16] CUSTOM_AXI_IP_REG2_0
    4'b 1111, // index[17] CUSTOM_AXI_IP_REG2_1
    4'b 1111, // index[18] CUSTOM_AXI_IP_REG2_2
    4'b 1111, // index[19] CUSTOM_AXI_IP_REG2_3
    4'b 1111, // index[20] CUSTOM_AXI_IP_REG2_4
    4'b 1111, // index[21] CUSTOM_AXI_IP_REG2_5
    4'b 1111, // index[22] CUSTOM_AXI_IP_REG2_6
    4'b 1111  // index[23] CUSTOM_AXI_IP_REG2_7
  };

endpackage